package de.hhn.se.labsw.gdt.server.resources;

import javax.inject.Singleton;
import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;

import org.glassfish.jersey.media.sse.EventOutput;
import org.glassfish.jersey.media.sse.OutboundEvent;
import org.glassfish.jersey.media.sse.SseFeature;
import org.glassfish.jersey.media.sse.SseBroadcaster;

import de.hhn.se.labsw.gdt.library.*;


/**
 * Resource Class used by clients to register with the server and notify other 
 * clients of updates to game states
 * 
 * @author Maximilian Roeck
 *
 */
//@Singleton
@Path("broadcasts")
public class BroadcasterResource {
//public final class BroadcasterResource {

	/**
	 * Broadcaster instance.
	 */
    private static SseBroadcaster broadcaster = new SseBroadcaster();

    /**
     * Invoked by clients to broadcast updates to the game states stored on the server.
     * 
     * @param gs
     * 			the game state to be broadcast
     * @return
     * 			acknowledgment of a successful broadcast
     */
    @POST
    @Produces(SseFeature.SERVER_SENT_EVENTS)
    @Consumes("application/json")
    public static void broadcastUpdate(GameState gs) {
    	broadcaster.broadcast(new OutboundEvent.Builder().mediaType(MediaType.APPLICATION_JSON_TYPE).data(GameState.class, gs).build());
    }
    
    @DELETE
    public static void broadcastDelete() {
    	broadcaster.broadcast(new OutboundEvent.Builder().id("delete").comment("delete").build());
    }

    /**
     * Invoked by clients to register with the server.
     * 
     * @return
     * 			eventOutput object, used as a "socket" to the server
     */
    @GET
    @Produces(SseFeature.SERVER_SENT_EVENTS)
    public static EventOutput listenToBroadcast() {
    	System.out.println("registration received");
        final EventOutput eventOutput = new EventOutput();
        broadcaster.add(eventOutput);
        return eventOutput;
    }
}